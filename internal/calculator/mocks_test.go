// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fpabl0/msoft_tdd/internal/calculator (interfaces: ICalculator)
//
// Generated by this command:
//
//	mockgen -destination ./mocks_test.go -package calculator -mock_names ICalculator=CalculatorMock . ICalculator
//

// Package calculator is a generated GoMock package.
package calculator

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// CalculatorMock is a mock of ICalculator interface.
type CalculatorMock struct {
	ctrl     *gomock.Controller
	recorder *CalculatorMockMockRecorder
}

// CalculatorMockMockRecorder is the mock recorder for CalculatorMock.
type CalculatorMockMockRecorder struct {
	mock *CalculatorMock
}

// NewCalculatorMock creates a new mock instance.
func NewCalculatorMock(ctrl *gomock.Controller) *CalculatorMock {
	mock := &CalculatorMock{ctrl: ctrl}
	mock.recorder = &CalculatorMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *CalculatorMock) EXPECT() *CalculatorMockMockRecorder {
	return m.recorder
}

// Addition mocks base method.
func (m *CalculatorMock) Addition(arg0, arg1 int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Addition", arg0, arg1)
	ret0, _ := ret[0].(int)
	return ret0
}

// Addition indicates an expected call of Addition.
func (mr *CalculatorMockMockRecorder) Addition(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Addition", reflect.TypeOf((*CalculatorMock)(nil).Addition), arg0, arg1)
}
